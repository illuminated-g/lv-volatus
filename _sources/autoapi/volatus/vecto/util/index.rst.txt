volatus.vecto.util
==================

.. py:module:: volatus.vecto.util


Classes
-------

.. autoapisummary::

   volatus.vecto.util.IPType


Functions
---------

.. autoapisummary::

   volatus.vecto.util.ipToInt
   volatus.vecto.util.intToIp
   volatus.vecto.util.localIPs
   volatus.vecto.util.splitSubnet
   volatus.vecto.util.ipType
   volatus.vecto.util.resolveAddress


Module Contents
---------------

.. py:class:: IPType(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: UNKNOWN
      :value: 0



   .. py:attribute:: SPECIFIC
      :value: 1



   .. py:attribute:: SUBNET
      :value: 2



   .. py:attribute:: ANY
      :value: 3



.. py:function:: ipToInt(ip: str) -> int

.. py:function:: intToIp(ip: int) -> str

.. py:function:: localIPs() -> list[str]

.. py:function:: splitSubnet(address: str) -> tuple[str, int]

.. py:function:: ipType(address: str) -> IPType

.. py:function:: resolveAddress(address: str) -> str | None

